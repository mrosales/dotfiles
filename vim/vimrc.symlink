" Vundle {{{
set nocompatible               " be iMproved
filetype off                   " required!
filetype plugin indent on     " required!
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()

" let Vundle manage Vundle  required!
Bundle 'gmarik/Vundle.vim'

" My Bundles here:
"
" original repos on github
Bundle 'majutsushi/tagbar'
Bundle 'altercation/vim-colors-solarized'
Bundle 'sjl/gundo.vim'
Bundle 'rking/ag.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'vim-ruby/vim-ruby'
Bundle 'tomasr/molokai'
Bundle 'chriskempson/base16-vim'
Bundle 'tpope/vim-markdown'
" Github repos of the user 'vim-scripts'
" => can omit the username part
Bundle 'L9'
Bundle 'FuzzyFinder'
" }}}
" Colors {{{
syntax enable
set background=dark
" let base16colorspace=256 " Access colors present in entire colorspace
colorscheme molokai
" }}}
" Misc {{{
set ttyfast 			"faster redraw
set backspace=indent,eol,start
set modelines=1
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
" }}}
" Navigation {{{
"inoremap  <Up>     <NOP>
"inoremap  <Down>   <NOP>
"inoremap  <Left>   <NOP>
"inoremap  <Right>  <NOP>
"noremap   <Up>     <NOP>
"noremap   <Down>   <NOP>
"noremap   <Left>   <NOP>
"noremap   <Right>  <NOP>
" }}}
"  Spaces + Tabs {{{
set tabstop=2			"2 space tabs
set expandtab			" use tabs instead of spaces
set softtabstop=2		" 2 space tabs
set shiftwidth=2
set modelines=1			" ??
filetype indent on
filetype plugin on
set autoindent
" }}}
" UI Layout {{{
set number			" show line numbers
set showcmd			" show command in command bar
set nocursorline		" highlight cursor line
set wildmenu
" set lazyredraw
set showmatch			" highlight matching parenthesis
" }}}
" Searching {{{
set ignorecase			" ignore case when searching
set incsearch			" search as characters are entered
set hlsearch			" highlight all matches
" }}}
" Folding {{{
set foldmethod=indent		" fold based on indent level
set foldnestmax=10		" max 10 depth
set foldenable			" don't fold files by default on open
nnoremap <space> za
set foldlevelstart=10		" start with fold level of 1
" }}}
" Line Shortcuts {{{
nnoremap j gj
nnoremap k gk
nnoremap B ^
nnoremap E $
nnoremap $ <nop>
nnoremap ^ <nop>
nnoremap gV `[v`]
onoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
xnoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
onoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>
xnoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>
" }}}
" Leader Shortcuts {{{
let mapleader=","     " leader is a comma
nnoremap <leader>u :GundoToggle<CR>
nnoremap <F5> :GundoToggle<CR>
nnoremap <leader>n :bn<CR>
nnoremap <leader>p :bp<CR>
nnoremap <leader>d :bd<CR>
" edit vimrc/zshrc and load vimrc bindings
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
nnoremap <leader>l :call ToggleNumber()<CR>
nnoremap <leader><space> :noh<CR>
nnoremap <leader>s :mksession<CR>
nnoremap <leader>a :Ag
nnoremap <leader>c :SyntasticCheck<CR>:Errors<CR>
nnoremap <leader>1 :set number!<CR>
nnoremap <leader>d :Make!
vnoremap <leader>y "+y
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
inoremap jk <esc>
" }}}
" CtrlP {{{
let g:ctrlp_match_windpw = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_custom_ignore = '\vbuild/|dist/|venv/|target/|\.(o|swp|pyc|egg)$'
" }}}
" Syntastic {{{
let g:syntastic_python_flake8_args='--ignore=E501'
" }}}
" TMUX {{{
" allows cursor change in tmux mode
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif
" }}}
" AutoGroups {{{
" }}}
" MacVim {{{
set guioptions-=r
set guioptions-=L
" }}}
" Backups {{{
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup
" }}}
" Custom Functions {{{
" toggle between number and relativenumber
function! ToggleNumber()
  if(&relativenumber == 1)
    set norelativenumber
    set number
  else
    set relativenumber
  endif
endfunc

" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup above
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

function! <SID>CleanFile()
  " Preparation: save last search, and cursor position
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %!git stripspace
  " Clean up: respore previous search history and cursor position
  let @/=_s
  call cursor(l,c)
endfunction
" }}}
" vim:foldmethod=marker:foldlevel=0
