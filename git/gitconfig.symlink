# Sample gitconfig
#

[hub]
	protocol = ssh

[credential]
	helper = osxkeychain

[core]
	# editor = subl -w
	excludesfile = /Users/mrosales/.gitignore_global
	whitespace = fix, -indent-with-non-tab,trailing-space
	autocrlf = false
	attributesfile = ~/.gitattributes
	# Treat spaces before tabs, lines that are indented with 8 or more spaces, and
	# all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of
	# a line
	whitespace = space-before-tab,indent-with-non-tab,trailing-space
	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

# set your user tokens as environment variables, such as ~/.secrets
# See the README for examples.
[color]
	ui = true

[color "branch"]
	current = yellow bold
	local = green bold
	remote = cyan bold

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse

[color "status"]
	added = green bold
	changed = yellow bold
	untracked = red bold

[gitflow "prefix"]
	feature = feature-
	release = release-
	hotfix = hotfix-
	support = support-
	versiontag = v
[url "https://github.com/"]
	insteadOf = gh:
[url "https://gist.github.com/"]
	insteadOf = gist:
[url "https://bitbucket.org/"]
	insteadOf = bb:
[help]
	autocorrect = 1
[push]
	default = simple

[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 

[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true

[filter "hawser"]
	clean = git hawser clean %f
	smudge = git hawser smudge %f
	required = true

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[url "ssh://git@github.com/"]
	insteadOf = https://github.com/

[url "ssh://git@bitbucket.org/"]
	insteadOf = https://bitbucket.org/

[alias]
	st = status
	ci = commit
	br = branch
	co = checkout
	df = diff
	lg = log -p
	lol = log --graph --decorate --pretty=oneline --abbrev-commit
	lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
	ls = ls-files
	find = "!git ls-files | grep -i"
	f = "!git ls-files | grep -i"
	created = "!f() { git find $1 | xargs git log --reverse --date=short --format=%ad -- | head -n1 ; }; f"
	grep = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
	stash-recover = "!git fsck --no-reflog 2>/dev/null | grep 'dangling commit' | cut -d ' ' -f 3 | xargs git log -1 --pretty=oneline"
	created = "!f() { git find $1 | xargs git log --reverse --date=short --format=%ad -- | head -n1 ; }; f"
	af = "!f() { git ls-files | grep -i $1 | xargs git add ; }; f"

	#########################################################################
	# The following are from the cloudfactory.files example

	# add
	a = add                           # add
	chunkyadd = add --patch           # stage commits chunk by chunk

	# via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
	snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
	snapshots = !git stash list --grep snapshot

	#via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
	recent-branches = !git for-each-ref --count=5 --sort=-committerdate refs/heads/ --format='%(refname:short)'

	# Remove branches that have already been merged with master
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"


	# branch
	b = branch -v                     # branch (verbose)


	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v


	# commit
	c = commit -m                     # commit with message
	ca = commit -am                   # commit all with message
	ci = commit                       # commit
	amend = commit --amend            # ammend your last commit
	ammend = commit --amend           # ammend your last commit

	# checkout
	co = checkout                     # checkout
	nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

	# cherry-pick
	cp = cherry-pick -x               # grab a change from a branch

	# diff
	d = diff                          # diff unstaged changes
	dc = diff --cached                # diff staged changes
	last = diff HEAD^                 # diff last committed change

	# log
	l = log --graph --date=short
	changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
	short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
	changelog = log --pretty=format:\" * %s\"
	shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

	# pull
	pl = pull                         # pull

	# push
	ps = push                         # push

	# rebase
	rc = rebase --continue            # continue rebase
	rs = rebase --skip                # skip rebase

	# remote
	r = remote -v                     # show remotes (verbose)

	# reset
	unstage = reset HEAD              # remove files from index (tracking)
	uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
	filelog = log -u                  # show changes to a file
	mt = mergetool                    # fire up the merge tool

	# stash
	ss = stash                        # stash changes
	sl = stash list                   # list stashes
	sa = stash apply                  # apply stash (restore changes)
	sd = stash drop                   # drop stashes (destory changes)

	# status
	s = status                        # status
	st = status                       # status
	stat = status                     # status

	# tag
	t = tag -n                        # show tags with <n> lines of each tag message

[format]
	pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset

[mergetool]
	prompt = false

[merge]
	summary = true
	verbosity = 1
	tool = mvimdiff

[apply]
	whitespace = nowarn

[branch]
	autosetupmerge = true

[push]
	# 'git push' will push the current branch to its tracking branch
	# the usual default is to push all branches
	default = tracking

[advice]
	statusHints = false

[diff]
	# Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
	# instead of a/b/c/d as prefixes for patches
	mnemonicprefix = true
	algorithm = patience
	tool = vimdiff

[difftool]
	prompt = false

[rerere]
	# Remember my merges
	# http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
	enabled = true

[include]
	path = .gitconfig.user

[branch]
	# When creating a new branch off a remote branch, always set it up to
	# track the remote branch so that we can pull from there.
	autoseupmerge = always
	autosetupmerge = true
	# mergeoptions = --no-ff

[branch "master"]
	# This is the list of cmdline options that should be added to git-merge
	# when I merge commits into the master branch.
	#
	# First off, the option --no-commit instructs git not to commit the merge
	# by default. This allows me to do some final adjustment to the commit log
	# message before it gets commited. I often use this to add extra info to
	# the merge message or rewrite my local branch names in the commit message
	# to branch names sensible to the casual reader of the git log.
	#
	# Option --no-ff instructs git to always record a merge commit, even if
	# the branch being merged into can be fast-forwarded. This is often the
	# case when you create a short-lived topic branch which tracks master, do
	# some changes on the topic branch and then merge the changes into the
	# master which remained unchanged while you were doing your work on the
	# topic branch. In this case the master branch can be fast-forwarded (that
	# is the tip of the master branch can be updated to point to the tip of
	# the topic branch) and this is what git does by default. With --no-ff
	# option set git creates a real merge commit which records the fact that
	# another branch was merged. I find this easier to understand and read in
	# the log.
	mergeoptions = --no-commit
 # mergeoptions = --no-ff
